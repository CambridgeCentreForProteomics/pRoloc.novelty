library(pRoloc)
library(pRolocdata)
data(tan2009r1)
object <- tan2009r1
fcol <- "markers"
first <- Sys.time()
opt <- perTurboRegularisation(object, fcol,times =10,inv="Moore Penrose",reg="none")
remove.packages("pRoloc")
install.packages("~/Documents/Projets/pRoloc_0.99.8.tar.gz", repos = NULL, type = "source")
library(pRoloc)
library(pRolocdata)
data(tan2009r1)
object <- tan2009r1
fcol <- "markers"
first <- Sys.time()
opt <- perTurboRegularisation(object, fcol,times =10,inv="Moore Penrose",reg="none")
print(Sys.time() - first)
source('~/Documents/Projets/pRoloc/R/perTurbo-algorithm.R')
remove.packages("pRoloc")
install.packages("~/Documents/Projets/pRoloc_0.99.8.tar.gz", repos = NULL, type = "source")
source('~/Documents/Projets/pRoloc/R/perTurbo-algorithm.R')
library(pRoloc)
library(pRolocdata)
data(tan2009r1)
object <- tan2009r1
fcol <- "markers"
first <- Sys.time()
opt <- perTurboRegularisation(object, fcol,times =10,inv="Moore Penrose",reg="none")
print(Sys.time() - first)
remove.packages("pRoloc")
install.packages("~/Documents/Projets/pRoloc_0.99.8.tar.gz", repos = NULL, type = "source")
library(pRoloc)
library(pRolocdata)
object <- tan2009r1
data(tan2009r1)
object <- tan2009r1
opt <- perTurboRegularisation(object, fcol,times =10,inv="Moore Penrose",reg="none")
source('~/Documents/Projets/pRoloc/R/perTurbo-algorithm.R')
remove.packages("pRoloc")
install.packages("~/Documents/Projets/pRoloc_0.99.8.tar.gz", repos = NULL, type = "source")
library(pRolocdata)
library(pRoloc)
data(tan2009r1)
object <- tan2009r1
fcol <- "markers"
opt <- perTurboRegularisation(object, fcol,times =10,inv="Moore Penrose",reg="none")
install.packages("~/Desktop/pRoloc_0.99.9.tar.gz", repos = NULL, type = "source")
library(pRoloc)
data(tan2009r1)
library(pRolocdata)
data(tan2009r1)
fcol <- "markers"
object <- tan2009r1
opt <- perTurboRegularisation(object, fcol,times =10,inv="Moore Penrose",reg="none")
opt <- perTurboRegularisation(object, fcol,times =10,inv="Moore Penrose",reg="tikhonov")
first <- Sys.time()
opt <- perTurboRegularisation(object, fcol,times =10,inv="Moore Penrose",reg="tikhonov")
print(Sys.time() - first)
opt
remove.packages("pRoloc")
library(roxygen2)
roxygenize("Desktop/pRoloc/", copy.package=FALSE, overwrite = FALSE)
roxygenize("Desktop/pRoloc/", copy.package=FALSE, overwrite = FALSE)
roxygenize("Desktop/pRoloc/", copy.package=FALSE, overwrite = FALSE)
remove.packages("pRoloc")
install.packages("~/Desktop/pRoloc_0.99.9.tar.gz", repos = NULL, type = "source")
library(pRoloc)
testStep
?perTurboRegularisation
library(pRolocdata)
object <- tan2009r1
data(tan2009r1)
object <- tan2009r1
fcol <- "markers"
first <- Sys.time()
opt <- perTurboRegularisation(object, fcol,times =10,inv="Moore Penrose",reg="tikhonov")
print(Sys.time() - first)
opt
first <- Sys.time()
opt <- perTurboRegularisation(object, fcol,times =10,inv="Moore Penrose",reg="tikhonov")
print(Sys.time() - first)
opt
warnings()
remove.packages("pRoloc")
library(pRoloc)
remove.packages("pRoloc")
install.packages("~/Desktop/pRoloc_0.99.9.tar.gz", repos = NULL, type = "source")
library(pRoloc)
remove.packages("pRoloc")
install.packages("~/Desktop/pRoloc_0.99.9.tar.gz", repos = NULL, type = "source")
library(pRoloc)
library(pRolocdata)
data(at_chloro)
object <- at_chloro
fcol <- "markers"
first <- Sys.time()
opt <- perTurboRegularisation(object, fcol,times =10,inv="Moore Penrose",reg="none")
print(Sys.time() - first)
first <- Sys.time()
opt <- perTurboRegularisation(object, fcol,times =10,inv="Moore Penrose",reg="tikhonov")
print(Sys.time() - first)
first <- Sys.time()
opt <- perTurboRegularisation(object, fcol,times =10,inv="Moore Penrose",reg="tikhonov")
print(Sys.time() - first)
opt
roxygenize("Desktop/pRoloc/", copy.package=FALSE)
library(roxygen2)
roxygenize("Desktop/pRoloc/", copy.package=FALSE)
roxygenize("Desktop/pRoloc/", copy.package=FALSE)
?perTurboRegularisation
roxygenize("Desktop/pRoloc/", copy.package=FALSE)
?perTurboRegularisation
roxygenize("Desktop/pRoloc/", copy.package=FALSE)
roxygenize("Desktop/pRoloc/", copy.package=FALSE)
?perTurboRegularisation
roxygenize("Desktop/pRoloc/", copy.package=FALSE)
?perTurboRegularisation
roxygenize("Desktop/pRoloc/", copy.package=FALSE)
?perTurboRegularisation
?perTurboRegularisation
?perTurboRegularisation
roxygenize("Desktop/pRoloc/", copy.package=FALSE)
roxygenize("Desktop/pRoloc/", copy.package=FALSE)
roxygenize("Desktop/pRoloc/", copy.package=FALSE)
remove.packages("pRoloc")
install.packages("~/Desktop/pRoloc_0.99.9.tar.gz", repos = NULL, type = "source")
library(pRoloc)
library(pRolocdata)
data(at_chloro)
object <- at_chloro
fcol <- "markers"
opt <- perTurboRegularisation(object, fcol,times =5,inv="Moore Penrose",reg="tikhonov")
pred <- perTurboPrediction(object, opt,fcol=fcol)
processingData(pred)
p1 <- getPredictions(pred, fcol="perTurbo")
minprob <- median(fData(pred)$perTurbo.scores)
p2 <- getPredictions(pred, fcol="perTurbo", t=minprob)
table(p1,p2)
ptsze <- exp(fData(pred)$perTurbo.score) - 1
plot2D(pred, fcol="perTurbo", fpch="markers", cex = ptsze, alpha=0.5)
data(tan2009r1)
object <- tan2009r1
fcol <- "markers"
opt <- perTurboRegularisation(object, fcol,times =5,inv="Moore Penrose",reg="tikhonov")
pred <- perTurboPrediction(object, opt,fcol=fcol)
processingData(pred)
p1 <- getPredictions(pred, fcol="perTurbo")
minprob <- median(fData(pred)$perTurbo.scores)
p2 <- getPredictions(pred, fcol="perTurbo", t=minprob)
table(p1,p2)
ptsze <- exp(fData(pred)$perTurbo.score) - 1
plot2D(pred, fcol="perTurbo", fpch="markers", cex = ptsze, alpha=0.5)
opt
data(tan2009r1)
object <- tan2009r1
fcol <- "markers"
opt <- perTurboRegularisation(object, fcol,times =5,inv="Moore Penrose",reg="tikhonov")
pred <- perTurboPrediction(object, opt,fcol=fcol)
processingData(pred)
p1 <- getPredictions(pred, fcol="perTurbo")
minprob <- median(fData(pred)$perTurbo.scores)
p2 <- getPredictions(pred, fcol="perTurbo", t=minprob)
table(p1,p2)
ptsze <- exp(fData(pred)$perTurbo.score) - 1
plot2D(pred, fcol="perTurbo", fpch="markers", cex = ptsze, alpha=0.5)
opt
opt <- perTurboRegularisation(tan2009R1, "markers",times =5,inv="Moore Penrose",reg="none")
pred <- perTurboPrediction(object, opt,fcol=fcol)
processingData(pred)
p1 <- getPredictions(pred, fcol="perTurbo")
minprob <- median(fData(pred)$perTurbo.scores)
p2 <- getPredictions(pred, fcol="perTurbo", t=minprob)
table(p1,p2)
ptsze <- exp(fData(pred)$perTurbo.score) - 1
plot2D(pred, fcol="perTurbo", fpch="markers", cex = ptsze, alpha=0.5)
opt <- perTurboRegularisation(tan2009r1, "markers",times =5,inv="Moore Penrose",reg="none")
pred <- perTurboPrediction(object, opt,fcol=fcol)
processingData(pred)
p1 <- getPredictions(pred, fcol="perTurbo")
minprob <- median(fData(pred)$perTurbo.scores)
p2 <- getPredictions(pred, fcol="perTurbo", t=minprob)
table(p1,p2)
ptsze <- exp(fData(pred)$perTurbo.score) - 1
plot2D(pred, fcol="perTurbo", fpch="markers", cex = ptsze, alpha=0.5)
opt <- perTurboRegularisation(tan2009r1, "markers",times =5,inv="Inversion Cholesky",reg="none")
pred <- perTurboPrediction(object, opt,fcol=fcol)
processingData(pred)
p1 <- getPredictions(pred, fcol="perTurbo")
minprob <- median(fData(pred)$perTurbo.scores)
p2 <- getPredictions(pred, fcol="perTurbo", t=minprob)
table(p1,p2)
ptsze <- exp(fData(pred)$perTurbo.score) - 1
plot2D(pred, fcol="perTurbo", fpch="markers", cex = ptsze, alpha=0.5)
opt
opt <- perTurboRegularisation(tan2009r1, "markers",times =5,inv="Inversion Cholesky",reg="tikhonov")
opt
opt <- perTurboRegularisation(tan2009r1, "markers",times =5,inv="svd",reg="none")
opt
perTurboRegularisation(tan2009r1, "markers",times =5,inv="svd",reg="none")
perTurboRegularisation(tan2009r1, "markers",times =5,inv="svd",reg="trunc")
perTurboRegularisation(at_chloro, "markers",times =5,inv="svd",reg="none")
opt <- perTurboRegularisation(at_chloro, "markers",times =5,inv="svd",reg="none")
pred <- perTurboPrediction(object, opt,fcol=fcol)
processingData(pred)
p1 <- getPredictions(pred, fcol="perTurbo")
minprob <- median(fData(pred)$perTurbo.scores)
p2 <- getPredictions(pred, fcol="perTurbo", t=minprob)
table(p1,p2)
ptsze <- exp(fData(pred)$perTurbo.score) - 1
plot2D(pred, fcol="perTurbo", fpch="markers", cex = ptsze, alpha=0.5)
opt <- perTurboRegularisation(at_chloro, "markers",times =5,inv="svd",reg="none")
pred <- perTurboPrediction(object, opt,fcol=fcol)
processingData(pred)
p1 <- getPredictions(pred, fcol="perTurbo")
minprob <- median(fData(pred)$perTurbo.scores)
p2 <- getPredictions(pred, fcol="perTurbo", t=minprob)
table(p1,p2)
ptsze <- exp(fData(pred)$perTurbo.score) - 1
plot2D(pred, fcol="perTurbo", fpch="markers", cex = ptsze, alpha=0.5)
library(pRoloc)
library(pRolocdata)
opt <- perTurboRegularisation(at_chloro, "markers",times =5,inv="svd",reg="none")
pred <- perTurboPrediction(object, opt,fcol=fcol)
processingData(pred)
p1 <- getPredictions(pred, fcol="perTurbo")
minprob <- median(fData(pred)$perTurbo.scores)
p2 <- getPredictions(pred, fcol="perTurbo", t=minprob)
table(p1,p2)
ptsze <- exp(fData(pred)$perTurbo.score) - 1
plot2D(pred, fcol="perTurbo", fpch="markers", cex = ptsze, alpha=0.5)
data(at_chloro)
opt <- perTurboRegularisation(at_chloro, "markers",times =5,inv="svd",reg="none")
pred <- perTurboPrediction(object, opt,fcol=fcol)
processingData(pred)
p1 <- getPredictions(pred, fcol="perTurbo")
minprob <- median(fData(pred)$perTurbo.scores)
p2 <- getPredictions(pred, fcol="perTurbo", t=minprob)
table(p1,p2)
ptsze <- exp(fData(pred)$perTurbo.score) - 1
plot2D(pred, fcol="perTurbo", fpch="markers", cex = ptsze, alpha=0.5)
library(pRoloc)
library(pRolocdata)
data(at_chloro)
opt <- perTurboRegularisation(at_chloro, "markers",times =5,inv="svd",reg="none")
pred <- perTurboPrediction(object, opt,fcol=fcol)
processingData(pred)
p1 <- getPredictions(pred, fcol="perTurbo")
minprob <- median(fData(pred)$perTurbo.scores)
p2 <- getPredictions(pred, fcol="perTurbo", t=minprob)
table(p1,p2)
ptsze <- exp(fData(pred)$perTurbo.score) - 1
plot2D(pred, fcol="perTurbo", fpch="markers", cex = ptsze, alpha=0.5)
fcol <- "markers"
opt <- perTurboRegularisation(at_chloro, fcol,times =5,inv="svd",reg="none")
pred <- perTurboPrediction(object, opt,fcol=fcol)
processingData(pred)
p1 <- getPredictions(pred, fcol="perTurbo")
minprob <- median(fData(pred)$perTurbo.scores)
p2 <- getPredictions(pred, fcol="perTurbo", t=minprob)
table(p1,p2)
ptsze <- exp(fData(pred)$perTurbo.score) - 1
plot2D(pred, fcol="perTurbo", fpch="markers", cex = ptsze, alpha=0.5)
data(at_chloro)
object <- at_chloro
fcol <- "markers"
opt <- perTurboRegularisation(object, fcol,times =5,inv="svd",reg="none")
pred <- perTurboPrediction(object, opt,fcol=fcol)
processingData(pred)
p1 <- getPredictions(pred, fcol="perTurbo")
minprob <- median(fData(pred)$perTurbo.scores)
p2 <- getPredictions(pred, fcol="perTurbo", t=minprob)
table(p1,p2)
ptsze <- exp(fData(pred)$perTurbo.score) - 1
plot2D(pred, fcol="perTurbo", fpch="markers", cex = ptsze, alpha=0.5)
opt
col()
?col
setwd("~/Documents/GitHub/pRoloc/R")
library(pRolocdata)
library(caret)
library(sampling)
library(kernlab)
library(inline)
loopInTestStep <- cxxfunction(signature(A="numeric", B="numeric",ind="integer"),
body='arma::mat Am = Rcpp::as< arma::mat >(A);
arma::mat Bm = Rcpp::as< arma::mat >(B);
int nbInd = Rcpp::as<int>(ind);
arma::colvec  setOfOnePerturbations(nbInd);
setOfOnePerturbations.zeros();
for (int k=0; k < nbInd; k++) {
setOfOnePerturbations(k) = arma::as_scalar(trans(Am.col(k)) * Bm * Am.col(k));
}
return Rcpp::wrap(setOfOnePerturbations);
', plugin="RcppArmadillo")
source('machinelearning-functions-PerTurbo.R')
source('perTurbo-algorithm.R')
source('machinelearning-utils.R')
source('AllGenerics.R')
source('machinelearning-framework.R')
data(at_chloro)
object <- at_chloro
data(tan2009r1)
object <- tan2009r1
fcol <- "markers"
perTurboRegularisation(object, fcol)
perTurboOptimisation(object, fcol)
opt <- perTurboOptimisation(object, fcol)
perTurboPrediction(object, opt,fcol=fcol)
perTurboClassification(object, opt,fcol=fcol)
source('machinelearning-framework.R')
perTurboClassification(object, opt,fcol=fcol)
source('machinelearning-framework.R')
perTurboClassification(object, opt,fcol=fcol)
traceback()
params <- c("pRegul"=3,"pSigma"=10)
otherparams <-
q
params
params["pSigma"]
otherparams <- c("inv"="solve","reg"="tikhonov")
otherparams
test <- c(params,"inv"="solve","reg"="tikhonov")
test
source('machinelearning-functions-PerTurbo.R')
perTurboClassification(object, opt,fcol=fcol)
traceback()
source('machinelearning-functions-PerTurbo.R')
perTurboClassification(object, opt,fcol=fcol)
perTurboClassification(object,fcol=fcol)
perTurboClassification(object,fcol=fcol, sigma=2,pRegul=10, inv="slove", reg="tikhonov")
perTurboClassification(object,fcol=fcol, sigma=2,pRegul=10, inv="solve", reg="tikhonov")
source('machinelearning-functions-PerTurbo.R')
perTurboClassification(object,fcol=fcol, sigma=2,pRegul=10, inv="solve", reg="tikhonov")
source('machinelearning-functions-PerTurbo.R')
perTurboClassification(object,fcol=fcol, sigma=2,pRegul=10, inv="solve", reg="tikhonov")
opt <- perTurboOptimisation(object, fcol,times =10,inv="Moore Penrose",reg="none")
pred <- perTurboClassification(object, opt,fcol=fcol)
processingData(pred)
p1 <- getPredictions(pred, fcol="perTurbo")
minprob <- median(fData(pred)$perTurbo.scores)
p2 <- getPredictions(pred, fcol="perTurbo", t=minprob)
table(p1,p2)
ptsze <- exp(fData(pred)$perTurbo.score) - 1
plot2D(pred, fcol="perTurbo", fpch="markers", cex = ptsze, alpha=0.5)
library(pRoloc)
source('machinelearning-functions-PerTurbo.R')
source('perTurbo-algorithm.R')
source('machinelearning-utils.R')
source('AllGenerics.R')
source('machinelearning-framework.R')
data(at_chloro)
object <- at_chloro
data(tan2009r1)
object <- tan2009r1
fcol <- "markers"
opt <- perTurboOptimisation(object, fcol,times =10,inv="Moore Penrose",reg="none")
pred <- perTurboClassification(object, opt,fcol=fcol)
processingData(pred)
p1 <- getPredictions(pred, fcol="perTurbo")
minprob <- median(fData(pred)$perTurbo.scores)
p2 <- getPredictions(pred, fcol="perTurbo", t=minprob)
table(p1,p2)
ptsze <- exp(fData(pred)$perTurbo.score) - 1
plot2D(pred, fcol="perTurbo", fpch="markers", cex = ptsze, alpha=0.5)
